name: Publish site to common-specs (main + drafts overlay)

on:
  # Rebuild site whenever main changes site/spec files
  push:
    branches: [main]
    paths:
      - "_specs/**"
      - "_draft_specs/**"   # harmless if absent on main
      - "_layouts/**"
      - "_includes/**"
      - "_data/**"
      - "assets/**"
      - "_config.yml"
      - "index.html"
      - "spec.html"
      - "style.css"
      - ".github/workflows/**"
  # Keep drafts current as PRs are opened/updated/closed
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled, closed]
    paths:
      - "_specs/**"
  # Safety net: refresh periodically
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: publish-common-specs
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Stage current main into /tmp/site
        run: |
          set -e
          rm -rf /tmp/site && mkdir -p /tmp/site
          rsync -a --delete --exclude '.git' ./ /tmp/site/
          rm -rf /tmp/site/_draft_specs

      - name: Build _draft_specs overlay from open proposal PRs
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('node:child_process');
            const fs = require('fs'); const path = require('path');
            const owner = context.repo.owner, repo = context.repo.repo;
            const prs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', per_page: 100
            });

            let count = 0;
            for (const pr of prs) {
              const hasWanted = (pr.labels || []).some(l =>
                /^(spec:proposal|in-progress)$/i.test((l.name||''))
              );
              if (!hasWanted) continue;

              const files = await github.paginate(github.rest.pulls.listFiles, {
                owner, repo, pull_number: pr.number, per_page: 100
              });

              const dirs = [...new Set(
                files.map(f => f.filename)
                     .filter(p => p.startsWith('_specs/'))
                     .map(p => p.replace(/^(_specs\/[^/]+\/[^/]+)\/.*/, '$1'))
              )];

              for (const dir of dirs) {
                const m = dir.match(/^_specs\/([^/]+)\/([^/]+)/);
                if (!m) continue;
                const [_, family, version] = m;

                const dst = path.join('/tmp/site/_draft_specs', family, version);
                fs.mkdirSync(dst, { recursive: true });

                // copy every file in that dir at PR HEAD
                const list = execSync(`git ls-tree -r --name-only ${pr.head.sha} '${dir}'`, {encoding:'utf8'})
                               .trim().split('\n').filter(Boolean);
                for (const p of list) {
                  const rel = p.slice(dir.length + 1);
                  const out = path.join(dst, rel);
                  fs.mkdirSync(path.dirname(out), { recursive: true });
                  const blob = execSync(`git show ${pr.head.sha}:'${p.replace(/'/g,"'\\''")}'`, {encoding:'utf8'});
                  fs.writeFileSync(out, blob);
                }

                // inject PR metadata into the draft index.md
                const idx = path.join(dst, 'index.md');
                if (fs.existsSync(idx)) {
                  const src = fs.readFileSync(idx, 'utf8');
                  const parts = src.split(/^---\s*$/m);
                  if (parts.length >= 3) {
                    parts[1] += `\npr: ${pr.number}\npr_url: ${pr.html_url}\npr_updated_at: ${pr.updated_at}\n`;
                    fs.writeFileSync(idx, parts.join('---\n'));
                  }
                }
                count++;
              }
            }
            core.setOutput('count', String(count));

      - name: Commit staged site to common-specs
        run: |
          set -e
          git fetch origin common-specs || true
          rm -rf /tmp/common-specs
          # Prepare a separate working tree for the target branch
          git worktree add -B common-specs /tmp/common-specs origin/common-specs || \
          git worktree add -B common-specs /tmp/common-specs
          # Sync staged site into the branch worktree
          rsync -a --delete /tmp/site/ /tmp/common-specs/
          cd /tmp/common-specs
          git config user.name  "spec-bot"
          git config user.email "spec-bot@users.noreply.github.com"
          if ! git diff --quiet; then
            git add -A
            git commit -m "Publish site from main + drafts overlay (count=${{ steps.build.outputs.count || '0' }})"
            git push origin common-specs
          else
            echo "No changes to publish."
          fi
