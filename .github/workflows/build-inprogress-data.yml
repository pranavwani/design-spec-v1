name: Build In-Progress Spec Index

on:
  schedule:
    - cron: "*/30 * * * *"   # every 30 minutes
  workflow_dispatch:          # allow manual “Run workflow”  
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled, closed]
    paths:
      - "_specs/**"
permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}  # e.g. 'main'


      - name: Collect open PRs and write _data/in_progress.json
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fetch all OPEN PRs; filter to proposals/in-progress
            const prs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', per_page: 100
            });

            const results = [];
            for (const pr of prs) {
              const hasLabel = pr.labels?.some(l =>
                /^(spec:proposal|in-progress)$/i.test(l.name)
              );
              if (!hasLabel) continue;

              // Files touched in PR
              const files = await github.paginate(github.rest.pulls.listFiles, {
                owner, repo, pull_number: pr.number, per_page: 100
              });

              // Directories under _specs/<family>/<version>
              const dirs = [...new Set(
                files
                  .map(f => f.filename)
                  .filter(p => p.startsWith('_specs/'))
                  .map(p => p.replace(/^(_specs\/[^/]+\/[^/]+)\/.*/, '$1'))
              )];
              if (dirs.length === 0) continue;

              for (const dir of dirs) {
                const m = dir.match(/^_specs\/([^/]+)\/([^/]+)/);
                const family = m ? m[1] : '';
                const version = m ? m[2] : '';

                // Try to read title/owner from the PR branch's index.md front-matter (best effort)
                let fmTitle = '', fmOwner = '';
                try {
                  const { data: file } = await github.rest.repos.getContent({
                    owner, repo, path: `${dir}/index.md`, ref: pr.head.sha
                  });
                  const src = Buffer.from(file.content, 'base64').toString('utf8');
                  const parts = src.split(/^---\s*$/m);
                  if (parts.length >= 3) {
                    const yaml = parts[1];
                    // quick scalar parse (no dependency)
                    const pick = (k) => {
                      const re = new RegExp(`^${k}:\\s*(.*)$`, 'mi');
                      const m = yaml.match(re);
                      return m ? m[1].trim().replace(/^"(.*)"$/, '$1') : '';
                    };
                    fmTitle = pick('title');
                    fmOwner = pick('owner');
                  }
                } catch (_) {}

                results.push({
                  pr: pr.number,
                  pr_title: pr.title,
                  pr_url: pr.html_url,
                  updated_at: pr.updated_at,
                  author: pr.user?.login || '',
                  dir, family, version,
                  title: fmTitle || pr.title.replace(/^\[Spec\]\s*/i, ''),
                  owner: fmOwner || (pr.user?.login ? `@${pr.user.login}` : ''),
                  status: 'in-progress'
                });
              }
            }

            const fs = require('fs');
            fs.mkdirSync('_data', { recursive: true });
            fs.writeFileSync('_data/in_progress.json', JSON.stringify(results, null, 2));
            core.setOutput('count', String(results.length));

      - name: Commit data (only if changed)
        run: |
          set -e
          git config user.name  "spec-bot"
          git config user.email "spec-bot@users.noreply.github.com"

          # Stage the file first so diff sees new files too
          git add -A _data/in_progress.json

          # Commit if staged changes exist; otherwise no-op
          if ! git diff --cached --quiet -- _data/in_progress.json; then
            git commit -m "chore(spec): refresh in-progress index (count=${{ steps.build.outputs.count }})"
            git push
          else
            echo "No changes."
          fi
